version: 2.1

orbs:
  win: circleci/windows@5.0

parameters:
  run-build:
    type: boolean
    default: false

environment: &global-environment
  DOCKER_REPO: dwavesys/ocean

jobs:
  build-linux-amd64:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    docker:
      - image: docker:20-git

    environment:
      <<: *global-environment
      ARCH: amd64

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Install jq
          command: apk add jq

      - run: &build-canonical-image
          name: Build image
          command: |
            tagfile="<< parameters.path >>/tags.json"

            c_tag=$(jq -r .canonical_tag "$tagfile")
            tag="$DOCKER_REPO:$CIRCLE_SHA1-$c_tag-$ARCH"

            docker build "<< parameters.path >>" -t "$tag"

      - run: &verify-canonical-image
          name: Verify image matches specs
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")
            tag="$DOCKER_REPO:$CIRCLE_SHA1-$c_tag-$ARCH"

            ocean_ver=$(jq -r .subtags.ocean "$tagfile")
            python_ver=$(jq -r .subtags.python "$tagfile")

            echo Ocean smoke test
            docker run -it --rm "$tag" dwave --platform

            echo Verify Ocean version (console invariant way)
            docker run -it --rm "$tag" python -c "import dwaveoceansdk; exit(dwaveoceansdk.__version__ != '$ocean_ver')"

            echo Verify Python version (console invariant way)
            docker run -it --rm "$tag" python -c "import sys; exit('.'.join(map(str, sys.version_info[:2])) != '$python_ver')"

      - run: &login-dockerhub
          name: Login to DockerHub
          command: |
            echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run: &push-canonical-image
          name: Push canonical image to DockerHub
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")

            tag="$DOCKER_REPO:$CIRCLE_SHA1-$c_tag-$ARCH"
            docker push "$tag"

  build-linux-arm64:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    machine:
      image: ubuntu-2004:202101-01

    resource_class: arm.medium

    environment:
      <<: *global-environment
      ARCH: arm64

    steps:
      - checkout
      - run: *build-canonical-image
      - run: *verify-canonical-image
      - run: *login-dockerhub
      - run: *push-canonical-image

  build-windows-amd64:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    executor:
      name: win/server-2022
      shell: bash -eo pipefail

    environment:
      <<: *global-environment
      ARCH: windows-amd64

    steps:
      - checkout
      - run: *build-canonical-image
      - run: *verify-canonical-image
      - run: *login-dockerhub
      - run: *push-canonical-image

  create-multi-arch:
    parameters:
      path:
        type: string
        description: >
          Build context path.
      architectures:
        type: string
        description: >
          Comma-separated (no space) list of architectures (codes) to build.

    docker:
      # all we need is bash and docker
      - image: cimg/base:stable

    environment:
      <<: *global-environment

    steps:
      - checkout

      - run: *login-dockerhub

      - run:
          name: Upload manifest list to DockerHub
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")
            tag="$DOCKER_REPO:$CIRCLE_SHA1-$c_tag"

            docker manifest create \
              "$tag" \
              "$tag-"{<< parameters.architectures >>}

            docker manifest push "$tag"

  deploy:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    docker:
      - image: cimg/base:stable

    environment:
      <<: *global-environment

    steps:
      - checkout

      - run: *login-dockerhub

      - run:
          name: Upload official multi-arch images
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")
            a_tags=$(jq -r ".alias_tags[]" "$tagfile")
            src_tag="$DOCKER_REPO:$CIRCLE_SHA1-$c_tag"

            # canonical
            docker buildx imagetools create -t "$DOCKER_REPO:$c_tag" "$src_tag"

            # aliases
            for a_tag in $a_tags; do
              docker buildx imagetools create -t "$DOCKER_REPO:$a_tag" "$src_tag"
            done

workflows:
  build-multi-arch:
    when: << pipeline.parameters.run-build >>
    jobs:
      - build-linux-amd64:
          name: linux-amd64-<< matrix.path >>
          matrix:
            parameters:
              # list manually for now; long-term, we want to auto-generate this list from the main runner
              path: &dockerfiles [
                "dockerfiles/5/python3.8/bullseye",
                "dockerfiles/5/python3.8/slim-bullseye",
                "dockerfiles/5/python3.9/bullseye",
                "dockerfiles/5/python3.9/slim-bullseye",
                "dockerfiles/5/python3.10/bullseye",
                "dockerfiles/5/python3.10/slim-bullseye"
              ]

      - build-linux-arm64:
          name: linux-arm64-<< matrix.path >>
          matrix:
            parameters:
              path: *dockerfiles

      - build-windows-amd64:
          name: windows-amd64-<< matrix.path >>
          matrix:
            parameters:
              # list manually for now; long-term, we want to auto-generate this list from the main runner
              path: [
                "dockerfiles/5/python3.8/windowsservercore",
                "dockerfiles/5/python3.9/windowsservercore",
                "dockerfiles/5/python3.10/windowsservercore",
              ]

      - create-multi-arch:
          name: create-multi-arch-<< matrix.path >>
          requires:
            - linux-amd64-<< matrix.path >>
            - linux-arm64-<< matrix.path >>
            - windows-amd64-<< matrix.path >>
          matrix:
            parameters:
              path: *dockerfiles
              architectures: ["amd64,arm64"]

      - deploy:
          name: deploy-<< matrix.path >>
          requires:
            - create-multi-arch-<< matrix.path >>
          matrix:
            parameters:
              path: *dockerfiles
          filters:
            branches:
              only: master
