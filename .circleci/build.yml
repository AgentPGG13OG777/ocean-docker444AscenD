version: 2.1

parameters:
  run-build:
    type: boolean
    default: false

environment: &global-environment
  DOCKER_REPO: dwavesys/ocean

jobs:
  build-multi-arch-qemu:
    working_directory: /ocean

    docker:
      - image: docker:20-git

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Install jq
          command: apk add jq

      - run:
          name: Setup QEMU
          command: |
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - run:
          name: Login to DockerHub
          command: |
            echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run:
          name: Build
          command: |
            docker context create ocean
            docker buildx create --use ocean --platform linux/amd64,linux/arm64
            find dockerfiles/ -name Dockerfile -exec sh -c '
              tagfile=$(dirname "$1")/tags.json
              c_tag=$(jq -r .canonical_tag "$tagfile")
              a_tags=$(jq -r ".alias_tags[]" "$tagfile")
              expanded_a_tags=$(for tag in $a_tags; do echo --tag "dwavesys/ocean:$tag"; done)
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --push \
                --tag "dwavesys/ocean:$c_tag" \
                $expanded_a_tags \
                . -f "$1"
            ' sh {} \;

  build-linux-amd64:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    docker:
      - image: docker:20-git

    environment:
      <<: *global-environment
      ARCH: amd64

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Install jq
          command: apk add jq

      - run: &build-canonical-image
          name: Build image
          command: |
            tagfile="<< parameters.path >>/tags.json"

            c_tag=$(jq -r .canonical_tag "$tagfile")
            tag="$DOCKER_REPO:$CIRCLE_SHA1-$c_tag-$ARCH"

            docker build "<< parameters.path >>" -t "$tag"

      - run: &verify-canonical-image
          name: Verify image matches specs
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")
            tag="$DOCKER_REPO:$CIRCLE_SHA1-$c_tag-$ARCH"

            ocean_ver=$(jq -r .subtags.ocean "$tagfile")
            python_ver=$(jq -r .subtags.python "$tagfile")
            platform=$(jq -r .subtags.platform "$tagfile")

            echo Ocean smoke test
            docker run -it --rm "$tag" dwave --platform

            echo Verify Ocean version
            docker run -it --rm "$tag" pip show dwave-ocean-sdk | grep -F "Version: $ocean_ver"

            echo Verify Python version
            docker run -it --rm "$tag" python -V | grep -F "Python $python_ver."

            echo Verify platform
            # limited scope for now (verify it's debian base image)
            docker run -it --rm "$tag" grep -F bullseye /etc/os-release

      - run: &login-dockerhub
          name: Login to DockerHub
          command: |
            echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run: &push-canonical-image
          name: Push canonical image to DockerHub
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")

            tag="$DOCKER_REPO:$CIRCLE_SHA1-$c_tag-$ARCH"
            docker push "$tag"

  build-linux-arm64:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    machine:
      image: ubuntu-2004:202101-01

    resource_class: arm.medium

    environment:
      <<: *global-environment
      ARCH: arm64

    steps:
      - checkout
      - run: *build-canonical-image
      - run: *verify-canonical-image
      - run: *login-dockerhub
      - run: *push-canonical-image

  create-multi-arch:
    parameters:
      path:
        type: string
        description: >
          Build context path.
      architectures:
        type: string
        description: >
          Comma-separated (no space) list of architectures (codes) to build.

    docker:
      # all we need is bash and docker
      - image: cimg/base:stable

    environment:
      <<: *global-environment

    steps:
      - checkout

      - run: *login-dockerhub

      - run:
          name: Upload manifest list to DockerHub
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")
            tag="$DOCKER_REPO:$CIRCLE_SHA1-$c_tag"

            docker manifest create \
              "$tag" \
              "$tag-"{<< parameters.architectures >>}

            docker manifest push "$tag"

  deploy:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    docker:
      - image: cimg/base:stable

    environment:
      <<: *global-environment

    steps:
      - checkout

      # - setup_remote_docker:
      #     docker_layer_caching: true

      # - run:
      #     name: Install jq
      #     command: apk add jq

      - run: *login-dockerhub

      - run:
          name: Upload official multi-arch images
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")
            a_tags=$(jq -r ".alias_tags[]" "$tagfile")
            src_tag="$DOCKER_REPO:$CIRCLE_SHA1-$c_tag"

            # canonical
            docker buildx imagetools create -t "$DOCKER_REPO:$c_tag" "$src_tag"

            # aliases
            for a_tag in $a_tags; do
              docker buildx imagetools create -t "$DOCKER_REPO:$a_tag" "$src_tag"
            done

workflows:
  build-multi-arch:
    when: << pipeline.parameters.run-build >>
    jobs:
      - build-linux-amd64:
          name: "linux-amd64: << matrix.path >>"
          matrix:
            parameters:
              # list manually for now; long-term, we want to auto-generate this list from the main runner
              path: &dockerfiles [
                "dockerfiles/5/python3.8/bullseye",
                "dockerfiles/5/python3.8/slim-bullseye",
                "dockerfiles/5/python3.9/bullseye",
                "dockerfiles/5/python3.9/slim-bullseye",
                "dockerfiles/5/python3.10/bullseye",
                "dockerfiles/5/python3.10/slim-bullseye"
              ]

      - build-linux-arm64:
          name: "linux-arm64: << matrix.path >>"
          matrix:
            parameters:
              path: *dockerfiles

      - create-multi-arch:
          name: "create-multi-arch: << matrix.path >>"
          requires:
            - build-linux-amd64
            - build-linux-arm64
          matrix:
            parameters:
              path: *dockerfiles
              architectures: ["amd64,arm64"]

      - deploy:
          name: "deploy: << matrix.path >>"
          requires:
            - create-multi-arch
          matrix:
            parameters:
              path: *dockerfiles
