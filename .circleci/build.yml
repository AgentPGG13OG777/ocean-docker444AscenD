version: 2.1

parameters:
  run-build:
    type: boolean
    default: false

jobs:
  build-multi-arch-qemu:
    working_directory: /ocean

    docker:
      - image: docker:20-git

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Install jq
          command: apk add jq

      - run:
          name: Setup QEMU
          command: |
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - run:
          name: Login to DockerHub
          command: |
            echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run:
          name: Build
          command: |
            docker context create ocean
            docker buildx create --use ocean --platform linux/amd64,linux/arm64
            find dockerfiles/ -name Dockerfile -exec sh -c '
              tagfile=$(dirname "$1")/tags.json
              c_tag=$(jq -r .canonical_tag "$tagfile")
              a_tags=$(jq -r ".alias_tags[]" "$tagfile")
              expanded_a_tags=$(for tag in $a_tags; do echo --tag "dwavesys/ocean:$tag"; done)
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --push \
                --tag "dwavesys/ocean:$c_tag" \
                $expanded_a_tags \
                . -f "$1"
            ' sh {} \;

  build-linux-amd64:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    docker:
      - image: docker:20-git

    environment:
      ARCH: amd64

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Install jq
          command: apk add jq

      - run: &build-canonical-image
          name: Build image
          command: |
            tagfile="<< parameters.path >>/tags.json"

            c_tag=$(jq -r .canonical_tag "$tagfile")
            tag="ocean:$CIRCLE_SHA1-$c_tag-$ARCH"

            docker build "<< parameters.path >>" -t "$tag"

      - run: &verify-canonical-image
          name: Verify image matches specs
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")
            tag="ocean:$CIRCLE_SHA1-$c_tag-$ARCH"

            ocean_ver=$(jq -r .subtags.ocean "$tagfile")
            python_ver=$(jq -r .subtags.python "$tagfile")
            platform=$(jq -r .subtags.platform "$tagfile")

            echo Ocean smoke test
            docker run -it --rm "$tag" dwave --platform

            echo Verify Ocean version
            docker run -it --rm "$tag" pip show dwave-ocean-sdk | grep -F "Version: $ocean_ver"

            echo Verify Python version
            docker run -it --rm "$tag" python -V | grep -F "Python $python_ver."

            echo Verify platform
            # limited scope for now (verify it's debian base image)
            docker run -it --rm "$tag" grep -F bullseye /etc/os-release

  build-linux-arm64:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    machine:
      image: ubuntu-2004:202101-01

    resource_class: arm.medium

    environment:
      ARCH: arm64

    steps:
      - checkout

      - run: *build-canonical-image

      - run: *verify-canonical-image

workflows:
  build-multi-arch:
    when: << pipeline.parameters.run-build >>
    jobs:
      # temporary
      - build-linux-amd64:
          matrix:
            parameters:
              path: ["dockerfiles/5/python3.10/bullseye/", "dockerfiles/5/python3.10/slim-bullseye/"]

      - build-linux-arm64:
          matrix:
            parameters:
              path: ["dockerfiles/5/python3.10/bullseye/", "dockerfiles/5/python3.10/slim-bullseye/"]

