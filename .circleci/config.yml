version: 2.1

jobs:
  build:
    docker:
      - image: docker:20-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install jq
          command: apk add jq
      - run:
          name: Build Ocean docker images
          command: |
            # note: -execdir not available in busybox, nor is bash
            find dockerfiles/ -name Dockerfile -exec sh -c '
              tagfile=$(dirname "$1")/tags.json
              c_tag=$(jq -r .canonical_tag "$tagfile")
              a_tags=$(jq -r ".alias_tags[]" "$tagfile")
              docker build \
                -f "$1" . \
                -t "ocean:$c_tag"
              for a_tag in $a_tags; do
                docker tag "ocean:$c_tag" "ocean:$a_tag"
              done
            ' sh {} \;

  test:
    parameters:
      python-version:
        type: string
      ocean-version:
        type: string
      platform:
        type: string

    docker:
      - image: docker:latest

    environment:
      TAG: "<< parameters.ocean-version >>-python<< parameters.python-version >>-<< parameters.platform >>"

    steps:
      - setup_remote_docker

      - run:
          name: Ocean smoke test (dwave CLI runs)
          command: |
            docker run -it --rm "ocean:$TAG" dwave --platform

      - run:
          name: Verify Ocean version
          command: |
            docker run -it --rm "ocean:$TAG" pip show dwave-ocean-sdk | grep -F "Version << parameters.ocean-version >>."

      - run:
          name: Verify Python version
          command: |
            docker run -it --rm "ocean:$TAG" python -V | grep -F "Python << parameters.python-version >>."

      - run:
          name: Verify platform
          command: |
            # limited scope for now (verify it's debian base image)
            docker run -it --rm "ocean:$TAG" grep -F bullseye /etc/os-release


workflows:
  build-and-test:
    jobs:
      - build:
          filters: &always-run
            tags:
              only: /.*/

      - test:
          name: "test ocean:<< matrix.ocean-version >>-python<< matrix.python-version >>-<< matrix.platform >>"
          requires:
            - build
          matrix:
            parameters:
              python-version: ["3.8", "3.9", "3.10"]
              ocean-version: ["5.3.0", "5.3", "5"]
              platform: ["bullseye", "slim-bullseye", "slim"]
          filters:
            <<: *always-run
